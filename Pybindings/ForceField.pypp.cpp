// This file has been generated by Py++.

#include "boost/python.hpp"
#include "ptools.h"
#include "ForceField.pypp.hpp"

namespace bp = boost::python;

struct ForceField_wrapper : PTools::ForceField, bp::wrapper< PTools::ForceField > {

    ForceField_wrapper()
    : PTools::ForceField()
      , bp::wrapper< PTools::ForceField >(){
        // null constructor
        
    }

    virtual void Derivatives( ::Vdouble const & StateVars, ::Vdouble & delta ) {
        if( bp::override func_Derivatives = this->get_override( "Derivatives" ) )
            func_Derivatives( boost::ref(StateVars), boost::ref(delta) );
        else
            this->PTools::ForceField::Derivatives( boost::ref(StateVars), boost::ref(delta) );
    }
    
    
    void default_Derivatives( ::Vdouble const & StateVars, ::Vdouble & delta ) {
        PTools::ForceField::Derivatives( boost::ref(StateVars), boost::ref(delta) );
    }

    virtual ::dbl Function( ::Vdouble const & arg0 ){
        bp::override func_Function = this->get_override( "Function" );
        return func_Function( boost::ref(arg0) );
    }

    virtual void NumDerivatives( ::Vdouble const & StateVars, ::Vdouble & delta, bool print=false ) {
        if( bp::override func_NumDerivatives = this->get_override( "NumDerivatives" ) )
            func_NumDerivatives( boost::ref(StateVars), boost::ref(delta), print );
        else
            this->PTools::ForceField::NumDerivatives( boost::ref(StateVars), boost::ref(delta), print );
    }
    
    
    void default_NumDerivatives( ::Vdouble const & StateVars, ::Vdouble & delta, bool print=false ) {
        PTools::ForceField::NumDerivatives( boost::ref(StateVars), boost::ref(delta), print );
    }

    virtual ::uint ProblemSize(  ){
        bp::override func_ProblemSize = this->get_override( "ProblemSize" );
        return func_ProblemSize(  );
    }

    virtual void initMinimization(  ){
        bp::override func_initMinimization = this->get_override( "initMinimization" );
        func_initMinimization(  );
    }

};

void register_ForceField_class(){

    bp::class_< ForceField_wrapper, boost::noncopyable >( "ForceField" )    
        .def( 
            "Derivatives"
            , &::PTools::ForceField::Derivatives
            , &ForceField_wrapper::default_Derivatives
            , ( bp::arg("StateVars"), bp::arg("delta") ) )    
        .def( 
            "Function"
            , bp::pure_virtual( &::PTools::ForceField::Function )
            , ( bp::arg("arg0") ) )    
        .def( 
            "NumDerivatives"
            , &::PTools::ForceField::NumDerivatives
            , &ForceField_wrapper::default_NumDerivatives
            , ( bp::arg("StateVars"), bp::arg("delta"), bp::arg("print")=(bool)(false) ) )    
        .def( 
            "ProblemSize"
            , bp::pure_virtual( &::PTools::ForceField::ProblemSize ) )    
        .def( 
            "initMinimization"
            , bp::pure_virtual( &::PTools::ForceField::initMinimization ) );

}
