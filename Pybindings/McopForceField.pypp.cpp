// This file has been generated by Py++.

#include "boost/python.hpp"
#include "ptools.h"
#include "McopForceField.pypp.hpp"

namespace bp = boost::python;

struct McopForceField_wrapper : PTools::McopForceField, bp::wrapper< PTools::McopForceField > {

    McopForceField_wrapper(::PTools::BaseAttractForceField & ff, ::dbl cutoff )
    : PTools::McopForceField( boost::ref(ff), cutoff )
      , bp::wrapper< PTools::McopForceField >(){
        // constructor
    
    }

    virtual void Derivatives( ::Vdouble const & v, ::Vdouble & g ) {
        if( bp::override func_Derivatives = this->get_override( "Derivatives" ) )
            func_Derivatives( boost::ref(v), boost::ref(g) );
        else
            this->PTools::McopForceField::Derivatives( boost::ref(v), boost::ref(g) );
    }
    
    
    void default_Derivatives( ::Vdouble const & v, ::Vdouble & g ) {
        PTools::McopForceField::Derivatives( boost::ref(v), boost::ref(g) );
    }

    virtual ::dbl Function( ::Vdouble const & arg0 ) {
        if( bp::override func_Function = this->get_override( "Function" ) )
            return func_Function( boost::ref(arg0) );
        else
            return this->PTools::McopForceField::Function( boost::ref(arg0) );
    }
    
    
    ::dbl default_Function( ::Vdouble const & arg0 ) {
        return PTools::McopForceField::Function( boost::ref(arg0) );
    }

    virtual ::uint ProblemSize(  ) {
        if( bp::override func_ProblemSize = this->get_override( "ProblemSize" ) )
            return func_ProblemSize(  );
        else
            return this->PTools::McopForceField::ProblemSize(  );
    }
    
    
    ::uint default_ProblemSize(  ) {
        return PTools::McopForceField::ProblemSize( );
    }

    virtual void initMinimization(  ) {
        if( bp::override func_initMinimization = this->get_override( "initMinimization" ) )
            func_initMinimization(  );
        else
            this->PTools::McopForceField::initMinimization(  );
    }
    
    
    void default_initMinimization(  ) {
        PTools::McopForceField::initMinimization( );
    }

};

void register_McopForceField_class(){

    bp::class_< McopForceField_wrapper, bp::bases< PTools::ForceField >, boost::noncopyable >( "McopForceField", bp::init< PTools::BaseAttractForceField &, dbl >(( bp::arg("ff"), bp::arg("cutoff") )) )    
        .def( 
            "Derivatives"
            , &::PTools::McopForceField::Derivatives
            , &McopForceField_wrapper::default_Derivatives
            , ( bp::arg("v"), bp::arg("g") ) )    
        .def( 
            "Function"
            , &::PTools::McopForceField::Function
            , &McopForceField_wrapper::default_Function
            , ( bp::arg("arg0") ) )    
        .def( 
            "ProblemSize"
            , &::PTools::McopForceField::ProblemSize
            , &McopForceField_wrapper::default_ProblemSize )    
        .def( 
            "calculate_weights"
            , &::PTools::McopForceField::calculate_weights
            , ( bp::arg("lig"), bp::arg("print")=(bool)(false) ) )    
        .def( 
            "initMinimization"
            , &::PTools::McopForceField::initMinimization
            , &McopForceField_wrapper::default_initMinimization )    
        .def( 
            "setLigand"
            , &::PTools::McopForceField::setLigand
            , ( bp::arg("lig") ) )    
        .def( 
            "setReceptor"
            , &::PTools::McopForceField::setReceptor
            , ( bp::arg("rec") ) );

}
