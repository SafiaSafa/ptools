// This file has been generated by Py++.

#include "boost/python.hpp"
#include "ptools.h"
#include "Coord3D.pypp.hpp"

namespace bp = boost::python;

void register_Coord3D_class(){

    { //::PTools::Coord3D
        typedef bp::class_< PTools::Coord3D > Coord3D_exposer_t;
        Coord3D_exposer_t Coord3D_exposer = Coord3D_exposer_t( "Coord3D" );
        bp::scope Coord3D_scope( Coord3D_exposer );
        Coord3D_exposer.def( bp::init< >() );
        Coord3D_exposer.def( bp::init< dbl, dbl, dbl >(( bp::arg("nx"), bp::arg("ny"), bp::arg("nz") )) );
        Coord3D_exposer.def( bp::init< PTools::Coord3D const & >(( bp::arg("old") )) );
        { //::PTools::Coord3D::Normalize
        
            typedef ::PTools::Coord3D & ( ::PTools::Coord3D::*Normalize_function_type )(  ) ;
            
            Coord3D_exposer.def( 
                "Normalize"
                , Normalize_function_type( &::PTools::Coord3D::Normalize )
                , bp::return_internal_reference< >() );
        
        }
        { //::PTools::Coord3D::operator=
        
            typedef ::PTools::Coord3D & ( ::PTools::Coord3D::*assign_function_type )( ::PTools::Coord3D const & ) ;
            
            Coord3D_exposer.def( 
                "assign"
                , assign_function_type( &::PTools::Coord3D::operator= )
                , ( bp::arg("C") )
                , bp::return_self< >() );
        
        }
        Coord3D_exposer.def( bp::self == bp::self );
        { //::PTools::Coord3D::toString
        
            typedef ::std::string ( ::PTools::Coord3D::*toString_function_type )( bool ) ;
            
            Coord3D_exposer.def( 
                "toString"
                , toString_function_type( &::PTools::Coord3D::toString )
                , ( bp::arg("newline")=(bool)(true) ) );
        
        }
        Coord3D_exposer.def_readwrite( "x", &PTools::Coord3D::x );
        Coord3D_exposer.def_readwrite( "y", &PTools::Coord3D::y );
        Coord3D_exposer.def_readwrite( "z", &PTools::Coord3D::z );
        Coord3D_exposer.def( bp::other< dbl >() * bp::self );
        Coord3D_exposer.def( bp::self * bp::other< dbl >() );
        Coord3D_exposer.def( bp::self + bp::self );
        Coord3D_exposer.def( bp::self += bp::self );
        Coord3D_exposer.def( bp::self - bp::self );
        Coord3D_exposer.def( bp::self -= bp::self );
        Coord3D_exposer.def( bp::self / bp::other< dbl >() );
    }

}
