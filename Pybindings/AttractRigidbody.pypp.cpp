// This file has been generated by Py++.

#include "AttractRigidbody.pypp.hpp"
#include "boost/python.hpp"
#include "/people/cheetah/asaladin/Src/ptools/trunk/ptools.h"
#include "/people/cheetah/asaladin/Src/ptools/trunk/py_details.h"

namespace bp = boost::python;

struct AttractRigidbody_wrapper : PTools::AttractRigidbody, bp::wrapper< PTools::AttractRigidbody > {

    AttractRigidbody_wrapper(PTools::AttractRigidbody const & arg )
    : PTools::AttractRigidbody( arg )
      , bp::wrapper< PTools::AttractRigidbody >(){
        // copy constructor
        
    }

    AttractRigidbody_wrapper(::PTools::Rigidbody const & rig )
    : PTools::AttractRigidbody( boost::ref(rig) )
      , bp::wrapper< PTools::AttractRigidbody >(){
        // constructor
    
    }

    virtual bool isAtomActive( ::uint i ) const  {
        if( bp::override func_isAtomActive = this->get_override( "isAtomActive" ) )
            return func_isAtomActive( i );
        else
            return this->PTools::AttractRigidbody::isAtomActive( i );
    }
    
    
    bool default_isAtomActive( ::uint i ) const  {
        return PTools::AttractRigidbody::isAtomActive( i );
    }

};

void register_AttractRigidbody_class(){

    bp::class_< AttractRigidbody_wrapper, bp::bases< PTools::Rigidbody > >( "AttractRigidbody", bp::init< PTools::Rigidbody const & >(( bp::arg("rig") )) )    
        .def( 
            "getAtomTypeNumber"
            , &::PTools::AttractRigidbody::getAtomTypeNumber
            , ( bp::arg("i") ) )    
        .def( 
            "getCharge"
            , &::PTools::AttractRigidbody::getCharge
            , ( bp::arg("i") ) )    
        .def( 
            "isAtomActive"
            , &::PTools::AttractRigidbody::isAtomActive
            , &AttractRigidbody_wrapper::default_isAtomActive
            , ( bp::arg("i") ) )    
        .def( 
            "resetForces"
            , &::PTools::AttractRigidbody::resetForces )    
        .def_readwrite( "m_activeAtoms", &PTools::AttractRigidbody::m_activeAtoms );

}
