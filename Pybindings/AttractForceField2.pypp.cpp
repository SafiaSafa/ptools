// This file has been generated by Py++.

#include "AttractForceField2.pypp.hpp"
#include "boost/python.hpp"
#include "/people/cheetah/asaladin/Src/ptools/trunk/ptools.h"
#include "/people/cheetah/asaladin/Src/ptools/trunk/py_details.h"

namespace bp = boost::python;

struct AttractForceField2_wrapper : PTools::AttractForceField2, bp::wrapper< PTools::AttractForceField2 > {

    AttractForceField2_wrapper(PTools::AttractForceField2 const & arg )
    : PTools::AttractForceField2( arg )
      , bp::wrapper< PTools::AttractForceField2 >(){
        // copy constructor
        
    }

    AttractForceField2_wrapper(::std::string paramsFileName, ::PTools::AttractRigidbody & rec, ::PTools::AttractRigidbody & lig, double cutoff )
    : PTools::AttractForceField2( paramsFileName, boost::ref(rec), boost::ref(lig), cutoff )
      , bp::wrapper< PTools::AttractForceField2 >(){
        // constructor
    
    }

    virtual void Derivatives( ::Vdouble const & arg0, ::Vdouble & arg1 ) {
        if( bp::override func_Derivatives = this->get_override( "Derivatives" ) )
            func_Derivatives( boost::ref(arg0), boost::ref(arg1) );
        else
            this->PTools::AttractForceField2::Derivatives( boost::ref(arg0), boost::ref(arg1) );
    }
    
    
    void default_Derivatives( ::Vdouble const & arg0, ::Vdouble & arg1 ) {
        PTools::AttractForceField2::Derivatives( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual double Function( ::Vdouble const & arg0 ) {
        if( bp::override func_Function = this->get_override( "Function" ) )
            return func_Function( boost::ref(arg0) );
        else
            return this->PTools::AttractForceField2::Function( boost::ref(arg0) );
    }
    
    
    double default_Function( ::Vdouble const & arg0 ) {
        return PTools::AttractForceField2::Function( boost::ref(arg0) );
    }

    virtual ::uint ProblemSize(  ) {
        if( bp::override func_ProblemSize = this->get_override( "ProblemSize" ) )
            return func_ProblemSize(  );
        else
            return this->PTools::AttractForceField2::ProblemSize(  );
    }
    
    
    ::uint default_ProblemSize(  ) {
        return PTools::AttractForceField2::ProblemSize( );
    }

};

void register_AttractForceField2_class(){

    bp::class_< AttractForceField2_wrapper, bp::bases< PTools::ForceField > >( "AttractForceField2", bp::init< std::string, PTools::AttractRigidbody &, PTools::AttractRigidbody &, double >(( bp::arg("paramsFileName"), bp::arg("rec"), bp::arg("lig"), bp::arg("cutoff") )) )    
        .def( 
            "Derivatives"
            , &::PTools::AttractForceField2::Derivatives
            , &AttractForceField2_wrapper::default_Derivatives
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "Function"
            , &::PTools::AttractForceField2::Function
            , &AttractForceField2_wrapper::default_Function
            , ( bp::arg("arg0") ) )    
        .def( 
            "ProblemSize"
            , &::PTools::AttractForceField2::ProblemSize
            , &AttractForceField2_wrapper::default_ProblemSize )    
        .def( 
            "nonbon8"
            , &::PTools::AttractForceField2::nonbon8
            , ( bp::arg("rec"), bp::arg("lig") ) );

}
