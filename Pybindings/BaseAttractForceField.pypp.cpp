// This file has been generated by Py++.

#include "boost/python.hpp"
#include "ptools.h"
#include "BaseAttractForceField.pypp.hpp"

namespace bp = boost::python;

struct BaseAttractForceField_wrapper : PTools::BaseAttractForceField, bp::wrapper< PTools::BaseAttractForceField > {

    BaseAttractForceField_wrapper()
    : PTools::BaseAttractForceField()
      , bp::wrapper< PTools::BaseAttractForceField >(){
        // null constructor
        
    }

    virtual void Derivatives( ::Vdouble const & arg0, ::Vdouble & arg1 ) {
        if( bp::override func_Derivatives = this->get_override( "Derivatives" ) )
            func_Derivatives( boost::ref(arg0), boost::ref(arg1) );
        else
            this->PTools::BaseAttractForceField::Derivatives( boost::ref(arg0), boost::ref(arg1) );
    }
    
    
    void default_Derivatives( ::Vdouble const & arg0, ::Vdouble & arg1 ) {
        PTools::BaseAttractForceField::Derivatives( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual ::dbl Function( ::Vdouble const & arg0 ) {
        if( bp::override func_Function = this->get_override( "Function" ) )
            return func_Function( boost::ref(arg0) );
        else
            return this->PTools::BaseAttractForceField::Function( boost::ref(arg0) );
    }
    
    
    ::dbl default_Function( ::Vdouble const & arg0 ) {
        return PTools::BaseAttractForceField::Function( boost::ref(arg0) );
    }

    virtual ::uint ProblemSize(  ) {
        if( bp::override func_ProblemSize = this->get_override( "ProblemSize" ) )
            return func_ProblemSize(  );
        else
            return this->PTools::BaseAttractForceField::ProblemSize(  );
    }
    
    
    ::uint default_ProblemSize(  ) {
        return PTools::BaseAttractForceField::ProblemSize( );
    }

    virtual void initMinimization(  ) {
        if( bp::override func_initMinimization = this->get_override( "initMinimization" ) )
            func_initMinimization(  );
        else
            this->PTools::BaseAttractForceField::initMinimization(  );
    }
    
    
    void default_initMinimization(  ) {
        PTools::BaseAttractForceField::initMinimization( );
    }

    virtual ::dbl nonbon8( ::PTools::AttractRigidbody & rec, ::PTools::AttractRigidbody & lig, ::PTools::Attract2PairList & pairlist, bool print=false ) {
        if( bp::override func_nonbon8 = this->get_override( "nonbon8" ) )
            return func_nonbon8( boost::ref(rec), boost::ref(lig), boost::ref(pairlist), print );
        else
            return this->PTools::BaseAttractForceField::nonbon8( boost::ref(rec), boost::ref(lig), boost::ref(pairlist), print );
    }
    
    
    ::dbl default_nonbon8( ::PTools::AttractRigidbody & rec, ::PTools::AttractRigidbody & lig, ::PTools::Attract2PairList & pairlist, bool print=false ) {
        return PTools::BaseAttractForceField::nonbon8( boost::ref(rec), boost::ref(lig), boost::ref(pairlist), print );
    }

    virtual ::dbl nonbon8_forces( ::PTools::AttractRigidbody & rec, ::PTools::AttractRigidbody & lig, ::PTools::Attract2PairList & pairlist, ::std::vector< PTools::Coord3D > & forcerec, ::std::vector< PTools::Coord3D > & forcelig, bool print=false ){
        bp::override func_nonbon8_forces = this->get_override( "nonbon8_forces" );
        return func_nonbon8_forces( boost::ref(rec), boost::ref(lig), boost::ref(pairlist), boost::ref(forcerec), boost::ref(forcelig), print );
    }

    virtual void setDummyTypeList( ::PTools::AttractRigidbody & lig ){
        bp::override func_setDummyTypeList = this->get_override( "setDummyTypeList" );
        func_setDummyTypeList( boost::ref(lig) );
    }

};

void register_BaseAttractForceField_class(){

    bp::class_< BaseAttractForceField_wrapper, bp::bases< PTools::ForceField >, boost::noncopyable >( "BaseAttractForceField" )    
        .def( 
            "AddLigand"
            , &::PTools::BaseAttractForceField::AddLigand
            , ( bp::arg("lig") ) )    
        .def( 
            "Derivatives"
            , &::PTools::BaseAttractForceField::Derivatives
            , &BaseAttractForceField_wrapper::default_Derivatives
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "Function"
            , &::PTools::BaseAttractForceField::Function
            , &BaseAttractForceField_wrapper::default_Function
            , ( bp::arg("arg0") ) )    
        .def( 
            "GetLigand"
            , &::PTools::BaseAttractForceField::GetLigand
            , ( bp::arg("i") ) )    
        .def( 
            "MakePairLists"
            , &::PTools::BaseAttractForceField::MakePairLists )    
        .def( 
            "ProblemSize"
            , &::PTools::BaseAttractForceField::ProblemSize
            , &BaseAttractForceField_wrapper::default_ProblemSize )    
        .def( 
            "Rota"
            , &::PTools::BaseAttractForceField::Rota
            , ( bp::arg("molIndex"), bp::arg("phi"), bp::arg("ssi"), bp::arg("rot"), bp::arg("delta"), bp::arg("shift"), bp::arg("print")=(bool)(false) ) )    
        .def( 
            "Trans"
            , &::PTools::BaseAttractForceField::Trans
            , ( bp::arg("molIndex"), bp::arg("delta"), bp::arg("shift"), bp::arg("print")=(bool)(false) ) )    
        .def( 
            "initMinimization"
            , &::PTools::BaseAttractForceField::initMinimization
            , &BaseAttractForceField_wrapper::default_initMinimization )    
        .def( 
            "nonbon8"
            , &::PTools::BaseAttractForceField::nonbon8
            , &BaseAttractForceField_wrapper::default_nonbon8
            , ( bp::arg("rec"), bp::arg("lig"), bp::arg("pairlist"), bp::arg("print")=(bool)(false) ) )    
        .def( 
            "nonbon8_forces"
            , bp::pure_virtual( &::PTools::BaseAttractForceField::nonbon8_forces )
            , ( bp::arg("rec"), bp::arg("lig"), bp::arg("pairlist"), bp::arg("forcerec"), bp::arg("forcelig"), bp::arg("print")=(bool)(false) ) );

}
