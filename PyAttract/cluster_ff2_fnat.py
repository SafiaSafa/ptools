#!/usr/bin/env python

##
## script to cluster solutions generated by Attract
## 
## usage : cluster2.py arg1 arg2 [options]
##
## arg1 : output file generated by attract_ff2.py script
## arg2 : ligand file use during the docking procedure
## options :
##
## if you want to modify the cutoff value when comparing Rmsd or energy, 
## specify the -r or -e option (default value for both = 1.0)
## if you want to increase the number of best solution (according to the energy) that are clustered
## specify the -s (or --structure_cutoff) option. (default=2000)
## if you want to increase the number of cluster that are compared to the current structure 
## during the clustering process, specify the -c (or --cluster_cutoff) option (default=50)
##
## for example, to increase the scut and increase the Rmsd cutoff value,
## the following command should be used:
## > cluster2.py arg1 agr2 -scut 5000 -r 1.5
##

import sys
from optparse import OptionParser
import re


from ptools import *
from Extract import *
from fnat import *
from irmsd import *


parser = OptionParser()
parser.usage = 'cluster2.py <out_file> <lig_file> [options]'
parser.add_option("-e", "--energy_cutoff", action="store", type="float", dest="energy_cutoff", help="Energy cutoff value (default=1000.0)")
parser.add_option("-r", "--rmsd_cutoff", action="store", type="float", dest="rmsd_cutoff", help="Rmsd cutoff value (default=1.0)")
parser.add_option("-s", "--structure_cutoff", action="store", type="int", dest="structure_cutoff", help="number of structures to cluster, an increase of this value will increase significantly the time processing (default = 2000)")
parser.add_option("-c", "--cluster_cutoff", action="store", type="int", dest="cluster_cutoff", help="number of cluster that are compared during the clustering process, an increase of this value will increase significantly the time processing  (default=50)")
(options, args) = parser.parse_args()




class StructureI:
    def __cmp__(self, other):
            if self.trans < other.trans:
                return -1
            if self.trans > other.trans:
                return 1
            return cmp(self.rot, other.rot)
    pass



#reads database:

e = Extractor(sys.argv[1])
lig = e.getFile("ligand")
rec = e.getFile("receptor")

f=open(".ligtmp","w")
f.write(lig)
lig=Rigidbody(".ligtmp")
keys = e.getKeys()

f=open(".ligtmp","w")
f.write(rec)
rec=Rigidbody(".ligtmp")




sys.stderr.write("extracting simulation keys...")
p=re.compile("[0-9]+:[0-9]+")
correct_keys = [k for k in keys if p.match(k)]
sys.stderr.write("done\n")

sys.stderr.write("extracting structures...")
structures=[]
for k in correct_keys:
    structures.append(e.getRawData(k))
sys.stderr.write("done\n")



sys.stderr.write("sorting structures by energy...")
structures.sort(key=lambda i: i.ener)
sys.stderr.write("done\n")

cluster = []

class Struct:
    structure = None
    count = 0


limit_rmsd = 1.0 
limit_ener = 1000.0 
structure_cutoff=2000
cluster_cutoff=50
cluster_cutoff_=cluster_cutoff+1

if (options.energy_cutoff):
	limit_ener=options.energy_cutoff
if (options.rmsd_cutoff):
	limit_rmsd=options.rmsd_cutoff
if (options.structure_cutoff):
	structure_cutoff=options.structure_cutoff
if (options.cluster_cutoff):
	cluster_cutoff=options.cluster_cutoff
	cluster_cutoff_=options.cluster_cutoff+1

steps=int(structure_cutoff/10)
count=0 
sys.stderr.write("clustering...\n")
for s in structures[:structure_cutoff]:
    if count%steps == 0:
        sys.stderr.write("%f %% achieved\n"%((float(count)/structure_cutoff)*100.0))
    count+=1
    if s.ener>0:
        break
    new=True
    sc = rigidXMat44(lig,s.matrix)

    for c in reversed(cluster[-cluster_cutoff:]):
	if ( ( c.ext.ener-s.ener < limit_ener ) and ( Rmsd(sc,c.structure) < limit_rmsd ) ):
	#if Rmsd(sc,c.structure)< limit_rmsd:
            c.count += 1
            new=False
            #print "stuct added to a cluster"
            break
    if new==True:
        c = Struct()
        c.structure = sc
        c.ext = s
        c.count = 1
        cluster.append(c)
        if len(cluster) > cluster_cutoff:
           del cluster[-cluster_cutoff_].structure
        #print "new cluster"


#cluster.sort(key=lambda i: i.ext.ener)
#print "number of clusters:", len(cluster)
#print "first clusters (by energy) sizes:",
#for i in xrange(30):
    #print cluster[i].count,

#cluster.sort(key=lambda i: i.count, reverse=True)
#print "first clusters (by size):",
#for i in xrange(30):
    #print cluster[i].count,

    
cluster.sort(key=lambda i: i.ext.ener)
print "%-4s %6s %6s %13s %13s %8s %13s %13s"  %(" ", "Trans", "Rot", "Ener", "RmsdCA_ref", "Weight", "irmsd", "fnat")
for i in range(len(cluster)):
        ligprobe = e.getStructure(lig, "%i:%i"%(cluster[i].ext.trans,cluster[i].ext.rot))
	print "%-4s %6s %6s %13.7f %13.7f %8s %13.7f %13.7f" %("==", str(cluster[i].ext.trans), str(cluster[i].ext.rot), float(cluster[i].ext.ener), float(cluster[i].ext.rmsd), str(cluster[i].count), irmsd(rec,lig,ligprobe,reducedmodel=True), fnat(rec,lig,ligprobe) )
