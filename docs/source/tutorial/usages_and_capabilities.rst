

Ptools library usages and capabilities
======================================

Directly from C++
-----------------

Source code may be parsed by Doxygen, an automatic documentation generator.
This documentation may help for the C++ (and indirectly for the Python)
part of the library. 

If Doxygen is installed, simply type ``doxygen`` in
the directory which contains the ``Doxyfile`` (``$HOME/soft/ptools-XX``).
Then look into the ``html`` directory and open with your favorite web browser
the ``index.html`` file generated by doxygen. 

The most important objects and functions to manipulate PDB files are explained in
the following section.


From Python through the C++ binding
-----------------------------------

If PTools has been installed in the ``$HOME/soft/ptools-XX`` directory, 
update your ``PYTHONPATH`` environment variable accordingly::

    export PYTHONPATH=$PYTHONPATH:$HOME/soft/ptools-XX/

or add this line at the end of your ``$HOME/.bashrc`` file.

From the Python interpreter or from a Python script, 
first load the PTools library::

    from ptools import *


Rigidbody objects
^^^^^^^^^^^^^^^^^

Load PDB file (for instance ``1BTA.pdb``) into a rigidbody object::

    pdb = Rigidbody("1BTA.pdb")


Number of atoms::

    len(pdb)


Maximum distance (in Å) from geometric center::

    pdb.Radius()


Radius of gyration (in Å)::

    pdb.RadiusGyration()


Structure translation.

    First create a translation vector as a ``Coord3D`` object 
    (for instance +5 Å along the X axis, -3 Å along Y and +1 Å along the Z axis)::

        trans = Coord3D(5, -3, 1)

    Then, apply the translation vector ``trans``::

        pdb.Translate(trans)


Center structure to origin::

    pdb.CenterToOrigin()


Save structure as PDB file::

    WritePDB(pdb, "1BTA_centered.pdb")


Superpose two structures. 

    This is a complete example where we superpose a structure and its copy
    after a translation.


    First, load a PDB file as a Rigidbody object::

        pdb = Rigidbody("1BTA.pdb")

    Make a copy::

        pdb2 = Rigidbody(pdb)

    Create a translation vector::

        trans = Coord3D(5, 0, 1)

    Apply the translation on the copy::

        pdb2.Translate(trans)

    Superpose both structures::

        sup = superpose(pdb, pdb2)
    
    Extract RMSD and matrix::

        rmsd = sup.rmsd
        matrix = sup.matrix

    Print RMSD::

        print rmsd

    The output is ``1.22224104574e-07`` (in Å). Then print the 4×4 matrix::

        matrix.Print()

    with output::

            1  8.07909e-09  -5.80388e-09  1.42535e-09  
            -8.07909e-09  1  2.0426e-09  2.54026e-08  
            5.80388e-09  -2.0426e-09  1  -1.86091e-08  
            0  0  0  1  


Selection objects
^^^^^^^^^^^^^^^^^

Select CA atoms::

    sel_ca = pdb.CA()


Select backbone atoms::

    sel_bkbn = pdb.Backbone()


Select by chain::

    sel_chainA = pdb.SelectChainId("A")
    sel_chainB = pdb.SelectChainId("B")


Select a range of residues::

    sel_res = pdb.SelectResRange(10, 20)

Select atom types::

    sel_res = pdb.SelectAtomType("N")  # select atom type 'N'
    sel_hydrogen = pdb.SelectAtomType("H*")  # select any hydrogen ('H', 'HA', 'HG11')


.. note:: the wild card currently only works if the search pattern is one
          letter followed by the '*' character.
          Ie you can select any carbon or hydrogen, but you cannot match for
          example CG1 *and* CG2 atoms with one instruction.


Get the number of atomes (the size) of a selection::

    len(sel_res)


Reunion between two selections::

    sel_chainAB = sel_chainA | sel_chainB

or directly::

    sel_chainAB = pdb.SelectChainId("A") | pdb.SelectChainId("B")


Intersection between two selections::

    sel_chain_AandB = sel_chainA & sel_chainB

or directly::

    sel_chain_AandB = pdb.SelectChainId("A") & pdb.SelectChainId("B")


Inverse of a selection.
    The logical NOT operator is implemented in Python with the ``.not_()`` method::

        notA = sel_chainA.not_()

    It is also possible to use the ``~`` operator::

        notA = ~sel_chainA


Example of more complex operations on selections.
    It is possible to combine ``&``, ``|``, ``~`` operator in more complex operations. 
    For example, the following command selects Calpha atoms for residues 3-14
    together with side chains atoms for residues 6-22::

        complex_sel = (pdb.SelectResRange(3,14) & pdb.CA()) |   \
                          (pdb.SelectResRange(6,22) & ~pdb.Backbone() )


Convert selection to rigidbody object::

    ca_trace = sel_ca.CreateRigid()


Atom objects
^^^^^^^^^^^^

Copy atom from rigidbody object.
    In this example, the third atom (indexed as 2 since the first atom in
    numberered 0) is copied::

        at = pdb.CopyAtom(2)

    You should note that any operation affecting the newly created Atom at will
    not affect the ``pdb`` instance.

Set new coordinates::

    new_XYZ = Coord3D(2.1,3.9,5.5)
    at.SetCoords(new_XYZ)


Translate atom::

    vector = Coord3D(1.0,1.0,1.0)
    at.Translate(vector)


Print atom in pdb-like format::

    at.ToPdbString()


Atom properties:: 
    One can read and write atom properties.
    Here is a list of accessible properties::

        atomType # CA, N, HN1, ...
        atomElement # C, N, H, O, etc.
        residType # LEU, ARG, ...
        chainId # A, B, etc.
        residId # residue number
        atomId # atom number
        atomCharge #charge of the atom
        extra #extra data


